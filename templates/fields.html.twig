{#
 # -------------------------------------------------------------------------
 # Fields plugin for GLPI
 # -------------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of Fields.
 #
 # Fields is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # Fields is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Fields. If not, see <http://www.gnu.org/licenses/>.
 # -------------------------------------------------------------------------
 # @copyright Copyright (C) 2013-2023 by Fields plugin team.
 # @license   GPLv2 https://www.gnu.org/licenses/gpl-2.0.html
 # @link      https://github.com/pluginsGLPI/fields
 # -------------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as macros %}

{% set already_wrapped = item is instanceof('CommonITILObject') and container.fields['type'] == 'dom' %}
{% set dropdown_item = item is instanceof('CommonDropdown') and container.fields['type'] == 'dom' %}

{% if item is instanceof('Glpi\\Form\\Form') %}
    {% set already_wrapped = true %}
{% endif %}

{% if not already_wrapped and not dropdown_item%}

{% set class = item.isNewItem() ? 'col-xxl-12' : 'col-xxl-9' %}
    <div class="col-12  {{ class }} flex-column">
        <div class="d-flex flex-row flex-wrap flex-xl-nowrap">
            <div class="row flex-row align-items-start flex-grow-1">
                <div class="row flex-row">
{% endif %}

{% for field in fields %}

    {% set type     = field['type'] %}
    {% set name     = field['name'] %}
    {% set label    = field['label'] %}
    {% set value    = item.input[name]|default(field['value']) %}
    {% set readonly = field['is_readonly'] %}
    {% set rand = random() %}

    {% set field_options = field_options|merge({
        'readonly': readonly or not canedit,
        'required': field['mandatory'],
        'full_width': field_options.full_width ?? already_wrapped,
    }) %}

    {% set input_name = field_options.input_name ?? name %}

    {% if type == 'header' %}
        {{ macros.largeTitle(label) }}

    {% elseif type == 'text' %}
        {{ macros.textField(input_name, value, label, field_options) }}

    {% elseif type == 'number' %}
        {{ macros.numberField(input_name, value, label, field_options|merge({step: 'any', min: ''})) }}

    {% elseif type == 'url' %}
            {% set ext_link %}
            {% if value|length %}
                <a target="_blank" href="{{ value }}">
                    <i class="ti ti-external-link"></i>
                    {{ __('show', 'fields') }}
                </a>
            {% endif %}
            {% endset %}
            {{ macros.textField(input_name, value, label, field_options|merge({
                'type': 'url',
                'add_field_html': ext_link
            })) }}

    {% elseif type == 'textarea' %}
        {{ macros.textareaField(input_name, value, label, field_options) }}

    {% elseif type == 'richtext' %}
        {{ macros.textareaField(input_name, value, label, field_options|merge({
            'enable_richtext': true,
            'field_class': 'col-12',
            'label_class': '',
            'input_class': '',
            'align_label_right': false,
        })) }}

    {% elseif type == 'yesno' %}
        {{ macros.dropdownYesNo(input_name, value, label, field_options) }}

    {% elseif type == 'date' %}
        {{ macros.dateField(input_name, value, label, field_options) }}

    {% elseif type == 'datetime' %}
        {{ macros.datetimeField(input_name, value, label, field_options) }}

    {% elseif type == 'dropdown' %}
        {% set dropdown_options = {'entity': item.getEntityID()} %}
        {% if field['multiple'] %}
            {% set dropdown_options = dropdown_options|merge({'multiple': true}) %}
        {% endif %}
        {% if item.isRecursive() %}
            {% set dropdown_options = dropdown_options|merge({'entity_sons': true}) %}
        {% endif %}
        {% if "dropdowns_id" in name %}
            {% set dropdown_itemtype = call("getItemtypeForForeignKeyField", [name]) %}
        {% else %}
            {% set dropdown_itemtype = call("PluginFieldsDropdown::getClassname", [name]) %}
        {% endif %}
        {% if input_name == name %}
            {% set name_fk = call("getForeignKeyFieldForItemType", [dropdown_itemtype]) %}
        {% endif %}
        {{ macros.dropdownField(dropdown_itemtype, name_fk ?? input_name, value, label, field_options|merge(dropdown_options|default({}))) }}

    {% elseif type matches '/^dropdown-.+/i' %}
        {% set dropdown_options = {'entity': item.getEntityID()} %}
        {% if field['dropdown_condition'] is defined and field['dropdown_condition']|length %}
            {% set dropdown_options = dropdown_options|merge({'condition': field['dropdown_condition']}) %}
        {% endif %}
        {% if field['dropdown_class'] == 'User' %}
            {% set dropdown_options = dropdown_options|merge({'entity': -1, 'right': 'all'}) %}
        {% elseif field['dropdown_class'] == 'Entity' or item.isRecursive() %}
            {% set dropdown_options = dropdown_options|merge({'entity_sons': true}) %}
        {% endif %}
        {% if field['multiple'] %}
            {% set dropdown_options = dropdown_options|merge({'multiple': true}) %}
        {% endif %}
        {{ macros.dropdownField(field['dropdown_class'], input_name, value, label, field_options|merge(dropdown_options|default({}))) }}

    {% elseif type == 'glpi_item' %}
        {% if not massiveaction %}

            {% if item is instanceof('Glpi\\Form\\Form') %}
                {% set itemtype_input_name = input_name ~ '[itemtype]' %}
                {% set items_id_input_name = input_name ~ '[items_id]' %}
            {% else %}
                {% set itemtype_input_name = 'itemtype_' ~ name %}
                {% set items_id_input_name = 'items_id_' ~ name %}
            {% endif %}

            {% if container.fields['type'] == 'tab' %}
                {# start new row for glpi object  #}
                <div class="w-100"></div>
            {% endif %}

            {% set items_id_dropdown %}
                {% do call('Ajax::updateItemOnSelectEvent',
                    [
                        'dropdown_' ~ itemtype_input_name ~ rand,
                        'results_items_id' ~ (rand),
                        config('root_doc') ~ '/ajax/dropdownAllItems.php',
                        {
                            'idtable'             : '__VALUE__',
                            'name'                : items_id_input_name,
                            'entity_restrict'     : item.getEntityID(),
                            'dom_name'            : items_id_input_name,
                            'display_emptychoice' : false,
                            'action'              : 'get_items_from_itemtype',
                            'dom_rand'            : rand,
                            'width'               : '100%',
                        }
                ]) %}

                <span id='results_items_id{{ rand }}' class='col-lg-14'>
                    {% if value.itemtype|default('') != '' %}
                        {{ macros.dropdownField(value.itemtype, items_id_input_name, value.items_id|default(''), ' ', field_options|merge({
                            'entity': value.itemtype|default('') == 'User' ? -1 : item.getEntityID(),
                            'rand': rand,
                            'right': 'all',
                            'displaywith': ['otherserial', 'serial'],
                            'display_emptychoice' : false,
                            'no_label': true,
                            'full_width': true,
                        })) }}
                    {% endif %}
                </span>
            {% endset %}

            {{ macros.dropdownArrayField(itemtype_input_name, value.itemtype|default(''), field['allowed_values'], label, field_options|merge({
                'rand'               : rand,
                'display_emptychoice': true,
                'add_field_class'    : field_options.add_field_class|default('') ~ ' glpi-fields-plugin-glpi-item-field',
                'add_field_html'     : items_id_dropdown
            })) }}
        {% endif %}
    {% endif %}
{% endfor %}

{% if not already_wrapped and not dropdown_item%}

                </div>
            </div>
        </div>
    </div>
{% endif %}
